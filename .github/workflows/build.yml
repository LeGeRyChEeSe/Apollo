name: Build Apollo

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libgl1-mesa-dev \
          libgles2-mesa-dev \
          libwayland-dev \
          libxrandr-dev \
          libxfixes-dev \
          libxi-dev \
          libx11-dev \
          libxext-dev \
          libxss-dev \
          libxtst-dev \
          libva-dev \
          libvdpau-dev \
          libdrm-dev \
          libcap-dev \
          libevdev-dev \
          libpulse-dev \
          libasound2-dev \
          libssl-dev \
          libavahi-client-dev \
          libboost-filesystem-dev \
          libboost-log-dev \
          libboost-program-options-dev \
          libnotify-dev \
          pkg-config
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install npm dependencies
      run: npm ci
    
    - name: Build web assets
      run: npm run build
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DSUNSHINE_ENABLE_WAYLAND=ON \
          -DSUNSHINE_ENABLE_X11=ON \
          -DSUNSHINE_ENABLE_DRM=ON \
          -G Ninja
    
    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}}
    
    - name: Run tests
      working-directory: build
      run: ctest --output-on-failure
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: apollo-linux
        path: build/sunshine

  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install npm dependencies
      run: npm ci
    
    - name: Build web assets
      run: npm run build
    
    - name: Configure CMake
      run: |
        cmake -B build ^
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ^
          -DSUNSHINE_ENABLE_NVENC=ON ^
          -DSUNSHINE_ENABLE_NVFBC=ON ^
          -G "Visual Studio 17 2022" ^
          -A x64
    
    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}}
    
    - name: Run tests
      working-directory: build
      run: ctest --output-on-failure --build-config ${{env.BUILD_TYPE}}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: apollo-windows
        path: build/${{env.BUILD_TYPE}}/sunshine.exe

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        brew install \
          cmake \
          ninja \
          boost \
          openssl \
          pkg-config
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install npm dependencies
      run: npm ci
    
    - name: Build web assets
      run: npm run build
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DOPENSSL_ROOT_DIR=$(brew --prefix openssl) \
          -G Ninja
    
    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}}
    
    - name: Run tests
      working-directory: build
      run: ctest --output-on-failure
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: apollo-macos
        path: build/sunshine

  package:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create release package
      run: |
        mkdir -p release
        cp apollo-linux/sunshine release/apollo-linux
        cp apollo-windows/sunshine.exe release/apollo-windows.exe
        cp apollo-macos/sunshine release/apollo-macos
        chmod +x release/apollo-*
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: apollo-release
        path: release/